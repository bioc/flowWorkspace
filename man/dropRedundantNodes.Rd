% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge_GatingSet.R
\name{dropRedundantNodes}
\alias{dropRedundantNodes}
\title{Remove the terminal leaf nodes that make the gating trees to be different from one another.}
\usage{
dropRedundantNodes(x, toRemove)
}
\arguments{
\item{x}{\code{GatingSet} or \code{list} of groups(each group is a list of 'GatingSet`). When it is a list, it is usually the outcome from \link{groupByTree}.}

\item{toRemove}{\code{list} of the node sets to be removed. its length must equals to the length of 'x'. When \code{x} is a list, \code{toRemove} is usually the outcome from \link{checkRedundantNodes}.}
}
\description{
It is usually called after \link{groupByTree} and \link{checkRedundantNodes}. The operation is done in place through external pointers which means
all the orginal GatingSets are modified.
}
\examples{
\dontrun{
gslist <- list(gs1, gs2, gs3, gs4, gs5)
gs_groups <- groupByTree(gslist)
toRm <- checkRedundantNodes(gs_groups)
dropRedundantNodes(gs_groups, toRm)

#Now they can be merged into a single GatingSetList.
#Note that the original gs objects are all modified in place.
GatingSetList(gslist)
}
}
